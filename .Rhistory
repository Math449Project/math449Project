knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(glmnet)
library(pls)
library (e1071)
library(corrplot)
library(tree)
library(ipred)
library(rpart)
library(gam)
library(randomForest)
library(gbm)
library(caret)
library(class)
library(FNN)
library(MASS)
library(DMwR2)
library(pROC)
library(Epi)
library(ROSE)
library(png)
library(tibble)
Bank=read.csv("~/Desktop/SFSU/math449Project/bank.csv",header=TRUE,sep=";")
Bank=ovun.sample(y~.,data=Bank,method="both",N=nrow(Bank),seed=123)$data
table(Bank$y)
Bank$y=ifelse(Bank$y == "yes",1,0)
table(Bank$y)
Bank$job=as.factor(Bank$job)
Bank$marital=as.factor(Bank$marital)
Bank$education=as.factor(Bank$education)
Bank$default=as.factor(Bank$default)
Bank$housing=as.factor(Bank$housing)
Bank$loan=as.factor(Bank$loan)
Bank$contact=as.factor(Bank$contact)
Bank$month=as.factor(Bank$month)
Bank$poutcome=as.factor(Bank$poutcome)
Bank$y=as.factor(Bank$y)
fullBank=glm(y~.,data=Bank,family="binomial")
summary(fullBank)
library(caret)
backwardsModel=step(
object=fullBank,
direction = "backward",
scope=y~.,
trace=0
)
selectedFeatures=names(coef(backwardsModel))[-1]
print(selectedFeatures)
forwardModel=step(
#fullBank is a original model fit
object=fullBank,
direction = "forward",
scope=y~.,
trace=0
)
selectedFeatures=names(coef(backwardsModel))[-1]
print(selectedFeatures)
selectedFeaturesCol=c("job","marital","education","housing","loan","contact","day","month","duration","campaign","pdays","previous","poutcome")
selected_features <- c(selectedFeaturesCol, "y")
print(selected_features)
newBank <- Bank%>%
dplyr::select(one_of(selected_features))
train = sample(dim(newBank)[1], dim(newBank)[1]*0.8)
test=-train
newBank.test=newBank[test,]
newBank.train=newBank[train,]
library(caret)
fitControl2 <- trainControl(method = "cv", number = 10)
#fit the modle
newBankFit <- train(y ~ ., data = newBank.train , method = "glm", trControl = fitControl2,family=binomial)
#predicitons
predictions2=predict(newBankFit,newdata = newBank.test,type="prob")
binaryPreds2=ifelse(predictions2[,2]>0.5,1,0)
binaryPredsfactor2=factor(binaryPreds2,levels=c(0,1),ordered=TRUE)
confusion2=confusionMatrix(binaryPredsfactor2,newBank.test$y)
confusion2
rocobj1 <- roc(newBank.test$y, binaryPredsfactor2)
plot(rocobj1,print.auc=TRUE,print.auc.x=0.5,print.auc.y=0.2)
aucScore1=auc(rocobj1)
print(aucScore1)
truePositive2=confusion2$table[2,2]
falsePositive2=confusion2$table[1,2]
precision2=truePositive2/(truePositive2+falsePositive2)
accuracy2=confusion2$overall["Accuracy"]
cat("Precision measures how often the model correctly predicts that customers will subscribe the term deposit.")
cat("\n")
cat("\n")
cat("The precision score using cross validation with the selected feature is" ,round(precision2*100,2), "%.")
cat("\n")
cat("\n")
cat("Accuracy measures how often the model correctly predicts, regardless of it is about predicting no subscirbe or subscribe the term deposit.")
cat("\n")
cat("The accuracy score using cross validation with the selected feature is" ,round(accuracy2*100,2), "%")
random.fit=train(y~.,data=newBank.train,method="rf",trControl=fitControl2)
random.fit=train(y~.,data=newBank.train,method="rf",trControl=fitControl2)
predictions3=predict(random.fit,newdata = newBank.test,type="prob")
binaryPreds3=ifelse(predictions3[,2]>0.5,1,0)
binaryPredsfactor3=factor(binaryPreds3,levels=c(0,1),ordered=TRUE)
confusion3=confusionMatrix(binaryPredsfactor3,newBank.test$y)
confusion3
rocobj2 <- roc(newBank.test$y, binaryPredsfactor3)
plot(rocobj2,print.auc=TRUE,print.auc.x=0.5,print.auc.y=0.2)
aucScore2=auc(rocobj2)
print(aucScore2)
residuals=residuals(newBankFit,type="pearson")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(glmnet)
library(pls)
library (e1071)
library(corrplot)
library(tree)
library(ipred)
library(rpart)
library(gam)
library(randomForest)
library(gbm)
library(caret)
library(class)
library(FNN)
library(MASS)
library(DMwR2)
library(pROC)
library(Epi)
library(ROSE)
library(png)
library(tibble)
Bank=read.csv("~/Desktop/SFSU/math449Project/bank.csv",header=TRUE,sep=";")
head(Bank)
str(Bank)
BankNumeric=select_if(Bank,is.integer)
corMatrix=cor(BankNumeric)
corrplot(corMatrix,type="upper",method="color",tl.col="black",t1.srt=45)
cols=c("job","marital","education","default","housing","contact","month","poutcome")
for (col in cols){
counts=table(Bank[,col][!is.numeric(Bank[,col])])
cat(paste0("Counts for ",col, " column :\n"))
print(counts)
cat("\n")
}
dev.new()
for (col in 1:length(cols)){
counts=table(Bank[,cols[col]][!is.numeric(Bank[,cols[col]])])
barplot(counts,main=cols[col],xlab="Non Numeric values", ylab="Count")
}
countsY=table(Bank$y)
barplot(countsY,main="Frequency for response variable Y",xlab="Customer Subsribe the term Deposit",ylab="Frequency")
percentageYes=countsY[2] / nrow(Bank) * 100
percentageNo=countsY[1] / nrow(Bank) * 100
cat(paste0("Percentage of subscription of term deposit: ",format(percentageYes,nsmall=2), " %"))
cat("\n")
cat(paste0("Percentage of no subscription of term deposit: ",format(percentageNo,nsmall=2), " %"))
Bank=ovun.sample(y~.,data=Bank,method="both",N=nrow(Bank),seed=123)$data
table(Bank$y)
Bank$y=ifelse(Bank$y == "yes",1,0)
table(Bank$y)
Bank$job=as.factor(Bank$job)
Bank$marital=as.factor(Bank$marital)
Bank$education=as.factor(Bank$education)
Bank$default=as.factor(Bank$default)
Bank$housing=as.factor(Bank$housing)
Bank$loan=as.factor(Bank$loan)
Bank$contact=as.factor(Bank$contact)
Bank$month=as.factor(Bank$month)
Bank$poutcome=as.factor(Bank$poutcome)
Bank$y=as.factor(Bank$y)
summary(Bank)
fullBank=glm(y~.,data=Bank,family="binomial")
summary(fullBank)
library(caret)
backwardsModel=step(
object=fullBank,
direction = "backward",
scope=y~.,
trace=0
)
selectedFeatures=names(coef(backwardsModel))[-1]
print(selectedFeatures)
forwardModel=step(
#fullBank is a original model fit
object=fullBank,
direction = "forward",
scope=y~.,
trace=0
)
selectedFeatures=names(coef(backwardsModel))[-1]
print(selectedFeatures)
selectedFeaturesCol=c("job","marital","education","housing","loan","contact","day","month","duration","campaign","pdays","previous","poutcome")
selected_features <- c(selectedFeaturesCol, "y")
print(selected_features)
newBank <- Bank%>%
dplyr::select(one_of(selected_features))
train = sample(dim(newBank)[1], dim(newBank)[1]*0.8)
test=-train
newBank.test=newBank[test,]
newBank.train=newBank[train,]
library(caret)
fitControl2 <- trainControl(method = "cv", number = 10)
#fit the modle
newBankFit <- train(y ~ ., data = newBank.train , method = "glm", trControl = fitControl2,family=binomial)
#predicitons
predictions2=predict(newBankFit,newdata = newBank.test,type="prob")
binaryPreds2=ifelse(predictions2[,2]>0.5,1,0)
binaryPredsfactor2=factor(binaryPreds2,levels=c(0,1),ordered=TRUE)
confusion2=confusionMatrix(binaryPredsfactor2,newBank.test$y)
confusion2
rocobj1 <- roc(newBank.test$y, binaryPredsfactor2)
plot(rocobj1,print.auc=TRUE,print.auc.x=0.5,print.auc.y=0.2)
aucScore1=auc(rocobj1)
print(aucScore1)
truePositive2=confusion2$table[2,2]
falsePositive2=confusion2$table[1,2]
precision2=truePositive2/(truePositive2+falsePositive2)
accuracy2=confusion2$overall["Accuracy"]
cat("Precision measures how often the model correctly predicts that customers will subscribe the term deposit.")
cat("\n")
cat("\n")
cat("The precision score using cross validation with the selected feature is" ,round(precision2*100,2), "%.")
cat("\n")
cat("\n")
cat("Accuracy measures how often the model correctly predicts, regardless of it is about predicting no subscirbe or subscribe the term deposit.")
cat("\n")
cat("The accuracy score using cross validation with the selected feature is" ,round(accuracy2*100,2), "%")
random.fit=train(y~.,data=newBank.train,method="rf",trControl=fitControl2)
predictions3=predict(random.fit,newdata = newBank.test,type="prob")
binaryPreds3=ifelse(predictions3[,2]>0.5,1,0)
binaryPredsfactor3=factor(binaryPreds3,levels=c(0,1),ordered=TRUE)
confusion3=confusionMatrix(binaryPredsfactor3,newBank.test$y)
confusion3
rocobj2 <- roc(newBank.test$y, binaryPredsfactor3)
plot(rocobj2,print.auc=TRUE,print.auc.x=0.5,print.auc.y=0.2)
aucScore2=auc(rocobj2)
print(aucScore2)
truePositive3=confusion3$table[2,2]
falsePositive3=confusion3$table[1,2]
precision3=truePositive3/(truePositive3+falsePositive3)
accuracy3=confusion3$overall["Accuracy"]
cat("Precision measures how often the model correctly predicts that customers will subscribe the term deposit.")
cat("\n")
cat("The precision score using cross validation with the selected feature is" ,round(precision3*100,2), "%.")
cat("\n")
cat("\n")
cat("Accuracy measures how often the model correctly predicts, regardless of it is about predicting no subscirbe or subscribe the term deposit.")
cat("\n")
cat("The accuracy score using cross validation with the selected feature is" ,round(accuracy3*100,2), "%")
treeModel=train(y ~ ., data = newBank.train , method = "rpart", trControl = fitControl2)
predictions4=predict(treeModel,newdata = newBank.test)
confusion4=confusionMatrix(data=predictions4,newBank.test$y)
confusion4
response=as.numeric(newBank.test$y)-1
predictor=as.numeric(predictions4)-1
rocobj3 <- roc(response, predictor)
plot(rocobj3,print.auc=TRUE,print.auc.x=0.5,print.auc.y=0.2)
aucScore3=auc(rocobj3)
print(aucScore3)
truePositive4=confusion4$table[2,2]
falsePositive4=confusion4$table[1,2]
precision4=truePositive4/(truePositive4+falsePositive4)
accuracy4=confusion4$overall["Accuracy"]
cat("Precision measures how often the model correctly predicts that customers will subscribe the term deposit.")
cat("\n")
cat("The precision score using cross validation with the selected feature is" ,round(precision4*100,2), "%.")
cat("\n")
cat("\n")
cat("Accuracy measures how often the model correctly predicts, regardless of it is about predicting no subscirbe or subscribe the term deposit.")
cat("\n")
cat("The accuracy score using cross validation with the selected feature is" ,round(accuracy4*100,2), "%")
naiveBayesFit=train(y ~ ., data = newBank.train , method = "naive_bayes", trControl = fitControl2)
predictions5=predict(naiveBayesFit,newdata = newBank.test)
confusion5=confusionMatrix(data=predictions5,newBank.test$y)
confusion5
response2=as.numeric(newBank.test$y)-1
predictor2=as.numeric(predictions5)-1
rocobj4 <- roc(response2, predictor2)
plot(rocobj4,print.auc=TRUE,print.auc.x=0.5,print.auc.y=0.2)
aucScore4=auc(rocobj4)
print(aucScore4)
truePositive5=confusion5$table[2,2]
falsePositive5=confusion5$table[1,2]
precision5=truePositive5/(truePositive5+falsePositive5)
accuracy5=confusion5$overall["Accuracy"]
cat("Precision measures how often the model correctly predicts that customers will subscribe the term deposit.")
cat("\n")
cat("The precision score using cross validation with the selected feature is" ,round(precision5*100,2), "%.")
cat("\n")
cat("\n")
cat("Accuracy measures how often the model correctly predicts, regardless of it is about predicting no subscirbe or subscribe the term deposit.")
cat("\n")
cat("The accuracy score using cross validation with the selected feature is" ,round(accuracy5*100,2), "%")
modelScores=data.frame(Model=c("logistic regression", "randomForests", "decision trees","Naive Bayes"),
Precision=c(round(precision2*100,2),round(precision3*100,2),round(precision4*100 ,2),round(precision5*100,2)),
Accuracy=c(round(accuracy2 *100,2),round(accuracy3 *100,2),round(accuracy4*100,2),round(accuracy5*100,2)),
AUC=c(round(aucScore1 *100 ,2),round(aucScore2 * 100,2),round(aucScore3 * 100 ,2),round(aucScore4*100,2)))
ggplot(modelScores,aes(x=Model,y=AUC))+
geom_bar(stat="identity",fill="steelblue")+
labs(title = "AUC Scores of Classification Models",
x= "Model",y="AUC Score")
ggplot(modelScores,aes(x=Model,y=Precision))+
geom_bar(stat="identity",fill="steelblue")+
labs(title = "Precision Scores of Classification Models",
x= "Model",y="Precision Score")
ggplot(modelScores,aes(x=Model,y=Accuracy))+
geom_bar(stat="identity",fill="steelblue")+
labs(title = "Accuracy Scores of Classification Models",
x= "Model",y="Accuracy Score")
