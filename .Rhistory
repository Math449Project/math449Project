knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(ggplot2)
library(glmnet)
library(pls)
library (e1071)
library(corrplot)
library(tree)
library(ipred)
library(rpart)
library(gam)
library(randomForest)
library(gbm)
library(caret)
library(class)
library(FNN)
library(MASS)
library(DMwR2)
library(pROC)
library(Epi)
library(ROSE)
library(png)
Bank=read.csv("~/Desktop/SFSU/math449Project/bank.csv",header=TRUE,sep=";")
head(Bank)
str(Bank)
BankNumeric=select_if(Bank,is.integer)
corMatrix=cor(BankNumeric)
corrplot(corMatrix,type="upper",method="color",tl.col="black",t1.srt=45)
cols=c("job","marital","education","default","housing","contact","month","poutcome")
for (col in cols){
counts=table(Bank[,col][!is.numeric(Bank[,col])])
cat(paste0("Counts for ",col, " column :\n"))
print(counts)
cat("\n")
}
dev.new()
for (col in 1:length(cols)){
counts=table(Bank[,cols[col]][!is.numeric(Bank[,cols[col]])])
barplot(counts,main=cols[col],xlab="Non Numeric values", ylab="Count")
}
countsY=table(Bank$y)
barplot(countsY,main="Frequency for response variable Y",xlab="Customer Subsribe the term Deposit",ylab="Frequency")
percentageYes=countsY[2] / nrow(Bank) * 100
percentageNo=countsY[1] / nrow(Bank) * 100
cat(paste0("Percentage of subscription of term deposit: ",format(percentageYes,nsmall=2), " %"))
cat("\n")
cat(paste0("Percentage of no subscription of term deposit: ",format(percentageNo,nsmall=2), " %"))
balanceData=ovun.sample(y~.,data=Bank,method="both",N=nrow(Bank),seed=123)$data
table(balanceData$y)
balanceData$y=ifelse(balanceData$y == "yes",1,0)
table(balanceData$y)
balanceData$job=as.factor(balanceData$job)
balanceData$marital=as.factor(balanceData$marital)
balanceData$education=as.factor(balanceData$education)
balanceData$default=as.factor(balanceData$default)
balanceData$housing=as.factor(balanceData$housing)
balanceData$loan=as.factor(balanceData$loan)
balanceData$contact=as.factor(balanceData$contact)
balanceData$month=as.factor(balanceData$month)
balanceData$poutcome=as.factor(balanceData$poutcome)
balanceData$y=as.factor(balanceData$y)
summary(Bank)
fullBank=glm(y~.,data=balanceData,family="binomial")
summary(fullBank)
set.seed(123)
control=rfeControl(functions=rfFuncs,method='cv',number=10)
rfecvModel=rfe(
x=balanceData[,-17],
y=balanceData$y,
sizes=c(1:4),
rfeControl = control,
method="rf")
print(rfecvModel$optVariables)
library(caret)
backwardsModel=step(
#fullBank is a original model fit
object=fullBank,
direction = "backward",
scope=y~.,
trace=0
)
selectedFeatures=names(coef(backwardsModel))[-1]
print(selectedFeatures)
forwardModel=step(
#fullBank is a original model fit
object=fullBank,
direction = "forward",
scope=y~.,
trace=0
)
selectedFeatures=names(coef(backwardsModel))[-1]
print(selectedFeatures)
train = sample(dim(balanceData)[1], dim(balanceData)[1]*0.8)
test=-train
balanceData.test=balanceData[test,]
balanceData.train=balanceData[train,]
library(caret)
fitControl <- trainControl(method = "cv", number = 10)
#fit the modle
balanceDataFit <- train(y ~ ., data = balanceData.train , method = "glm", trControl = fitControl,family=binomial)
#predicitons
predictions=predict(balanceDataFit,newdata = balanceData.test,type="prob")
binaryPreds=ifelse(predictions[,2]>0.5,1,0)
binaryPredsfactor=factor(binaryPreds,levels=c(0,1),ordered=TRUE)
confusion=confusionMatrix(binaryPredsfactor,balanceData.test$y)
print(confusion)
truePositive=confusion$table[2,2]
falsePositive=confusion$table[1,2]
precision=truePositive/(truePositive+falsePositive)
accuracy=confusion$overall["Accuracy"]
cat("Precision measures how often the model correctly predicts that customers will subscribe the term deposit")
cat("\n")
cat("The precision score using cross validation with all predictor is" ,round(precision*100,2), "%")
cat("\n")
cat("Accuracy measures how often the model correctly predicts how often the model is correct, regardless of it is about predicting no subscirbe or subscribe the term deposit")
cat("The accuracy score using cross validation with all predictor is" ,round(accuracy*100,2), "%")
rocobj <- roc(balanceData.test$y, binaryPredsfactor)
plot(rocobj,print.auc=TRUE,print.auc.x=0.5,print.auc.y=0.2)
selectedFeaturesCol=c("job","marital","education","housing","loan","contact","day","month","duration","campaign","pdays","previous","poutcome")
selected_features <- c(selectedFeaturesCol, "y")
print(selected_features)
newBank <- balanceData%>%
dplyr::select(one_of(selected_features))
train2 = sample(dim(newBank)[1], dim(newBank)[1]*0.8)
test2=-train2
newBank.test=newBank[test2,]
newBank.train=newBank[train2,]
library(caret)
fitControl2 <- trainControl(method = "cv", number = 10)
#fit the modle
newBankFit <- train(y ~ ., data = newBank.train , method = "glm", trControl = fitControl2,family=binomial)
#predicitons
predictions2=predict(newBankFit,newdata = newBank.test,type="prob")
binaryPreds2=ifelse(predictions2[,2]>0.5,1,0)
binaryPredsfactor2=factor(binaryPreds2,levels=c(0,1),ordered=TRUE)
confusion2=confusionMatrix(binaryPredsfactor2,newBank.test$y)
confusion2
rocobj <- roc(newBank.test$y, binaryPredsfactor2)
plot(rocobj,print.auc=TRUE,print.auc.x=0.5,print.auc.y=0.2)
truePositive2=confusion2$table[2,2]
falsePositive2=confusion2$table[1,2]
precision2=truePositive2/(truePositive2+falsePositive2)
accuracy2=confusion2$overall["Accuracy"]
cat("Precision measures how often the model correctly predicts that customers will subscribe the term deposit.")
cat("\n")
cat("The precision score using cross validation with the selected feature is" ,round(precision2*100,2), "%.")
cat("\n")
cat("\n")
cat("Accuracy measures how often the model correctly predicts how often the model is correct, regardless of it is about predicting no subscirbe or subscribe the term deposit.")
cat("\n")
cat("The accuracy score using cross validation with the selected feature is" ,round(accuracy2*100,2), "%")
random.fit=train(y~.,data=newBank.train,method="rf",trControl=fitControl2)
predictions2=predict(random.fit,newdata = newBank.test,type="prob")
predictions3=predict(random.fit,newdata = newBank.test,type="prob")
predictions3
binaryPreds3=ifelse(predictions3[,2]>0.5,1,0)
binaryPredsfactor3=factor(binaryPreds3,levels=c(0,1),ordered=TRUE)
binaryPredsfactor3
confusion3=confusionMatrix(binaryPredsfactor3,newBank.test$y)
confusion3
